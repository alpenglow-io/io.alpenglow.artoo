package re.artoo.lance.test.query.cursor;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import re.artoo.lance.query.FetchException;
import re.artoo.lance.query.cursor.Open;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;

class OpenTest {
  @Test
  @DisplayName("should open valid values only")
  void shouldOpenValidValuesOnly() throws Throwable {
    var open = new Open<>("Luke", null, "I'm", "your", null, "father", null, null, null, "fool!");

    assertThat(open.fetch()).isEqualTo("Luke");
    assertThat(open.fetch()).isEqualTo(null);
    assertThat(open.fetch()).isEqualTo("I'm");
    assertThat(open.fetch()).isEqualTo("your");
    assertThat(open.fetch()).isEqualTo(null);
    assertThat(open.fetch()).isEqualTo("father");
    assertThat(open.fetch()).isEqualTo(null);
    assertThat(open.fetch()).isEqualTo(null);
    assertThat(open.fetch()).isEqualTo(null);
    assertThat(open.fetch()).isEqualTo("fool!");
    assertThat(open.canFetch()).isFalse();
  }

  @Test
  @DisplayName("should throw an exception on an open empty cursor")
  void shouldThrowAnExceptionOnEmptyCursor() {
    var open = new Open<>();

    assertThrows(FetchException.class, open::fetch);
  }
}
